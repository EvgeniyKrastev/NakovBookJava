
//Принципът на заместимост на Лисков (Liskov Substitution Principle - LSP)------------------------------
//гласи,
//че обектите от наследени класове трябва да могат да се използват
//вместо обекти от техния базов клас, без да нарушават поведението на програмата.
//
//С други думи, ако имаме базов клас B и клас D, който го наследява,
//то всеки обект от тип D трябва да може да замести обект от тип B,
//без да се променя коректността на програмата.
//
//
//Основни насоки:
//Наследникът трябва да поддържа поведението на базовия клас:
//
//Наследникът не трябва да нарушава договорите, дефинирани от интерфейса
// на базовия клас.
//Методи в наследника трябва да работят коректно с очакваните входове и изходи.
//Презумпцията за коректност:
//
//Ако метод от базов клас очаква дадени параметри, наследникът трябва да приема
// същите параметри със същата семантика.
//Ако методът връща определен тип, наследникът не трябва да променя този
// тип или неговата семантика.
//Избягване на разширения, които нарушават основното поведение:
//
//Не добавяй поведение в наследника, което прави обектите му несъвместими
// с оригиналния базов клас.
//
//Как да избегнем нарушаване на LSP:
//Използвай подходящи базови класове и интерфейси:
//
//Ако не всички наследници могат да изпълняват даден метод, тогава този метод
// не трябва да бъде част от базовия клас.
//Вместо това може да се използва интерфейс или отделен клас за специфичната
// функционалност.
//Прецизно дефинирай поведението:
//
//        Увери се, че поведението, дефинирано в базовия клас, е общовалидно
//        за всички наследници.
//Композиция вместо наследяване:
//
//Ако наследникът не спазва правилата на базовия клас, използвай композиция,
// за да избегнеш проблема.








